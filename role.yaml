---
- name: Host Role Configuration / Deployment
  hosts: |-
    {%- if nfc_pb_host is defined -%}
      {{ nfc_pb_host }}
    {%- else -%}
      all
    {%- endif %}
  become: false
  gather_facts: false


  pre_tasks:


    - name: Confirm Existance of NetBox Connection Variables
      ansible.builtin.assert:
        that:
          - lookup('env', 'NETBOX_API') != ''
          - lookup('env', 'NETBOX_TOKEN') != ''
        msg: "'NETBOX_API' and 'NETBOX_TOKEN' environmental variables must be set"


    - name: Fetch DCIM ID from NetBox
      ansible.builtin.uri:
        url: |-
          {{ lookup('env', 'NETBOX_API') }}/api/
          {%- if is_virtual -%}
            virtualization/virtual-machines
          {%- else -%}
            dcim/devices
          {%- endif -%}
          /?name={{ inventory_hostname }}&serial={{ serial }}
        method: GET
        headers:
          Authorization: Token {{ lookup('env', 'NETBOX_TOKEN') }}
        return_content: true
        validate_certs: "{{ lookup('env', 'NETBOX_VALIDATE_CERTS') | default(true) | bool }}"
      check_mode: false
      delegate_to: localhost
      no_log: true    # Contains a secret that logging shows
      register: host_details


    - name: Fetch Rendered Config from NetBox
      ansible.builtin.uri:
        url: |-
          {{ lookup('env', 'NETBOX_API') }}/api/
          {%- if is_virtual -%}
            virtualization/virtual-machines
          {%- else -%}
            dcim/devices
          {%- endif -%}
          /{{ host_details.json.results[0].id }}/render-config/
        method: POST
        headers:
          Authorization: Token {{ lookup('env', 'NETBOX_TOKEN') }}
        return_content: true
        validate_certs: "{{ lookup('env', 'NETBOX_VALIDATE_CERTS') | default(true) | bool }}"
      check_mode: false
      delegate_to: localhost
      no_log: true    # Contains a secret that logging shows
      register: host_configuration


    - name: TRACE Rendered Config
      ansible.builtin.debug:
        msg: "{{ host_configuration.json.content | from_yaml }}"
      check_mode: true


    - name: Try / Catch
      block:


        - name: Save Vars to temp file so they can be loaded as hostvars
          ansible.builtin.copy:
            content: "{{ host_configuration.json.content | from_yaml | to_nice_json(indent=0) }}"
            dest: "/tmp/vars_{{ inventory_hostname }}.json"
            mode: '777'
          changed_when: false
          check_mode: false
          delegate_to: localhost


        - name: Load Vars as hostvars
          ansible.builtin.include_vars:
            file: "/tmp/vars_{{ inventory_hostname }}.json"
          check_mode: false
          delegate_to: localhost


      always:


        - name: Clean tmp var files
          ansible.builtin.file:
            path: "/tmp/vars_{{ inventory_hostname }}.json"
            state: absent
          changed_when: false
          check_mode: false
          delegate_to: localhost


    - name: Role Variable Validation - Kubernetes
      ansible.builtin.assert:
        that:
          - nfc_role_kubernetes_configure_firewall is defined
          - nfc_role_kubernetes_configure_firewall != ''
          - nfc_role_kubernetes_etcd_enabled is defined
          - nfc_role_kubernetes_etcd_enabled != ''
          - nfc_role_kubernetes_install_olm is defined
          - nfc_role_kubernetes_install_olm != ''
          - nfc_role_kubernetes_install_helm is defined
          - nfc_role_kubernetes_install_helm != ''
          - nfc_role_kubernetes_install_kubevirt is defined
          - nfc_role_kubernetes_install_kubevirt != ''
          - nfc_role_kubernetes_kubevirt_operator_replicas is defined
          - nfc_role_kubernetes_kubevirt_operator_replicas != ''
          - nfc_kubernetes_enable_metallb is defined
          - nfc_kubernetes_enable_metallb != ''
          - nfc_kubernetes_enable_servicelb is defined
          - nfc_kubernetes_enable_servicelb != ''
          - nfc_role_kubernetes_pod_subnet is defined
          - nfc_role_kubernetes_pod_subnet != ''
          - nfc_role_kubernetes_service_subnet is defined
          - nfc_role_kubernetes_service_subnet != ''
        msg: Missing Required Variable
      check_mode: false
      when: >
        role == 'kubernetes_node'


  tasks:

    - name: TRACE
      ansible.builtin.debug:
        msg: "{{ role }}"
      check_mode: false


    - name: "Deploy Role - {{ role_map[role].name }}"
      ansible.builtin.include_role:
        name: "{{ role_map[role].name }}"
        tasks_from: "{{ role_map[role].tasks_from | default(omit) }}"


  vars:

    nfc_pb_awx_tower_template:

      - name: "Playbook/Role"
        ask_tags_on_launch: false
        ask_inventory_on_launch: true
        ask_credential_on_launch: true
        ask_limit_on_launch: true
        description: Setup a hosts configured role.
        execution_environment: "No Fuss Computing EE"
        job_type: "check"
        labels:
          - initial
          - onboarding
          - role
          - soe
        use_fact_cache: true
